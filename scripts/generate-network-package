#!/usr/bin/env python

import argparse
from template import *

change_to_source_dir()

parser = argparse.ArgumentParser(prog='generate-network-package', description='Generate a NetworkPackage class')
parser.add_argument('--authenticated', action="store_true",
                    help='create a package inheriting AuthenticatedNetworkPackage (instead of inheriting NetworkPackage)')
parser.add_argument('name', metavar='package_name',
                    help='Name of the new NetworkPackage without the "Package"-postfix')
parser.add_argument('command_nr', metavar='command_nr', type=int,
                    help='Command number of the new NetworkPackage, should be unique')
parser.add_argument('members', nargs='*',
                    help='Members the NetworkPackage should have. Pass in the format of "member_name|type_t". If no type is given "int" is used. Getters and setters are generated.')

args = parser.parse_args()
args.uppercase_name = args.name.upper()
for i, member in enumerate(args.members):
    data = member.split('|')
    if len(data) <= 1:
        data.append("int")
    args.members[i] = {"property": data[0], "type": data[1]}

eval_template("scripts/network-package-template/source-file",
                       "src/common/communication/" + args.name + "Package.cpp",
                       args)
eval_template("scripts/network-package-template/header-file",
                       "src/common/communication/" + args.name + "Package.h",
                       args)

