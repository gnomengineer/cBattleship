#!/usr/bin/env python
# this is a script, not a module
# pylint: disable=C0103

"""a script to generate NetworkPackage classes for this project in a breeze"""

import argparse
from template import eval_template, change_to_source_dir

def parse_args():
    """parse command line arguments"""
    parser = argparse.ArgumentParser(prog='generate-network-package',
                                     description='Generate a NetworkPackage class')
    parser.add_argument('--authenticated', action="store_true",
                        help='create a package inheriting AuthenticatedNetworkPackage'
                        + '(instead of inheriting NetworkPackage)')
    parser.add_argument('name', metavar='package_name',
                        help='Name of the new NetworkPackage without the "Package"-postfix')
    parser.add_argument('command_nr', metavar='command_nr',
                        help='Command number of the new NetworkPackage, should be unique')
    parser.add_argument('members', nargs='*',
                        help='Members the NetworkPackage should have. Pass in the format'
                        + ' of "member_name|type_t". If no type is given "int" is used.'
                        + ' Getters and setters are generated.')

    return parser.parse_args()

def generate(args):
    """generate the network package source and header file,
       from the arguments given"""
    print "Generating", args.name + "Package with members: "
    args.uppercase_name = args.name.upper()
    for i, member in enumerate(args.members):
        data = member.split('|')
        if len(data) <= 1:
            data.append("int")
        args.members[i] = {"property": data[0], "type": data[1]}
        print " -", args.members[i]["type"], args.members[i]["property"];

    eval_template("scripts/network-package-template/header-file",
                  "src/common/packages/" + args.name + "Package.h",
                  args)

change_to_source_dir()
generate(parse_args())

